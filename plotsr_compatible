#!/usr/bin/env python
from itertools import count
from textwrap import indent
from turtle import done, position
import matplotlib.patches as mpatches
from matplotlib.patches import Rectangle
import matplotlib.pyplot as plt
import sys
from Bio import SeqIO

#import sequence 1
sequence1 = []
with open('/lustre/scratch123/tol/projects/badass/users/ak37/pangenome/coluzzii/3RL/AcolMOP1.fa', 'r') as file:
    for line in file:
        line = line.rstrip()
        sequence1.append(line)
    done
file.close()
sequence1 = ''.join(sequence1)
sequence1 = sequence1.upper()


#import sequence 2
sequence2 = []
with open('/lustre/scratch123/tol/projects/badass/users/ak37/pangenome/coluzzii/3RL/AcolN2.fa', 'r') as file:
    for line in file:
        line = line.rstrip()
        sequence2.append(line)
    done
file.close()
sequence2 = ''.join(sequence2)
sequence2 = sequence2.upper()


#produce list of 31-mers
kmer_list_sequence1 = []
for i in range(0, len(sequence1)-31):
    kmer = sequence1[i:i+31] 
    kmer_list_sequence1.append(kmer)
done

kmer_list_sequence2 = []
for i in range(0, len(sequence2)-31):
    kmer = sequence2[i:i+31] 
    kmer_list_sequence2.append(kmer)
done

#identify unique 31-mers (using sets because they are faster than lists)
unique_kmers_sequence1 = set(kmer_list_sequence1)
unique_kmers_sequence2 = set(kmer_list_sequence2)


#find inverted 31-mers (in sequence 1) - this includes both reverse and reverse complement kmers
inverse_kmers_sequence1 = []
reverse_complement_kmers_sequence1 = []

for i in kmer_list_sequence1:
    inverted_kmer = i[::-1]
    inverse_kmers_sequence1.append(inverted_kmer)

    reverse_complement_kmer = inverted_kmer.replace("C", "g")
    reverse_complement_kmer = reverse_complement_kmer.replace("G", "c")
    reverse_complement_kmer = reverse_complement_kmer.replace("A", "t")
    reverse_complement_kmer = reverse_complement_kmer.replace("T", "a")
    reverse_complement_kmer = reverse_complement_kmer.upper()

    reverse_complement_kmers_sequence1.append(reverse_complement_kmer)
done

#make them into sets, so you can use intersections
inverse_kmers_sequence1 = set(inverse_kmers_sequence1)
reverse_complement_kmers_sequence1 = set(reverse_complement_kmers_sequence1)

#find intersections
intersection_inverse_kmers = inverse_kmers_sequence1.intersection(unique_kmers_sequence2)  
intersection_reverse_complement_kmers = reverse_complement_kmers_sequence1.intersection(unique_kmers_sequence2)
shared_unique_kmers = unique_kmers_sequence1.intersection(unique_kmers_sequence2)


f = open('AcolMOP1-AcolN2_structural_variation.out', 'a')

for i in intersection_inverse_kmers:
    original_kmer = str(i)
    original_kmer = original_kmer[::-1]
    index_seq1 = kmer_list_sequence1.index(original_kmer)
    index_seq2 = kmer_list_sequence2.index(i)
    f.write("3RL\t" + str(index_seq1) + "\t" + str(index_seq1 + 30) + "\t3RL\t" + str(index_seq2) + "\t" + str(index_seq2 + 30) + "\t" + "INV")
    f.write("\n")
done

for i in intersection_reverse_complement_kmers:
    original_kmer = str(i)
    original_kmer = original_kmer[::-1]
    original_kmer = original_kmer.replace("A", "t")
    original_kmer = original_kmer.replace("T", "a")
    original_kmer = original_kmer.replace("C", "g")
    original_kmer = original_kmer.replace("G", "c")
    original_kmer = original_kmer.upper()

    index_seq1 = kmer_list_sequence1.index(original_kmer)
    index_seq2 = kmer_list_sequence2.index(i)
    f.write("3RL\t" + str(index_seq1) + "\t" + str(index_seq1 + 30) + "\t3RL\t" + str(index_seq2) + "\t" + str(index_seq2 + 30) + "\t" + "INV")
    f.write("\n")
done

for i in shared_unique_kmers:
    index_seq1 = kmer_list_sequence1.index(i)
    index_seq2 = kmer_list_sequence2.index(i)
    f.write("3RL\t" + str(index_seq1) + "\t" + str(index_seq1 + 30) + "\t3RL\t" + str(index_seq2) + "\t" + str(index_seq2 + 30) + "\t" + "SYN")
    f.write("\n")
done

f.close()
